name: CI

on: [push, pull_request]

jobs:
    test-linux:
        runs-on: ubuntu-latest
        name: Test on Linux
        env:
            PIP_BREAK_SYSTEM_PACKAGES: 1 # force pip to install in user space
        strategy:
            matrix:
                image:
                    [
                        'debian:latest',
                        'ubuntu:latest',
                        'fedora:latest',
                        'archlinux:latest',
                    ]
                include:
                    - image: 'debian:latest'
                      venv: true
                    - image: 'archlinux:latest'
                      venv: true
                      coverage: true # only generate coverage on archlinux
        container:
            image: ${{ matrix.image }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Dependencies
              run: |
                  # Determine package manager based on image name
                  case "${{ matrix.image }}" in
                      debian*|ubuntu*)
                          apt-get update
                          apt-get install -y zsh curl make git gdb build-essential jq nodejs npm python3-venv python3-pip locales procps golang-go
                          ;;
                      fedora*)
                          dnf install -y zsh curl make git gdb gcc jq nodejs npm python3 python3-pip glibc-all-langpacks procps-ng golang
                          ;;
                      archlinux*)
                          pacman -Syu --noconfirm zsh curl make git gdb gcc nodejs npm jq python python-pip procps-ng go
                          ;;
                  esac
                  # Install Python dependencies
                  if [[ "${{ matrix.venv }}" == "true" ]]; then
                    python3 -m venv venv
                    source venv/bin/activate
                  fi
                  python3 -m pip install -r requirements.txt

            - name: Run Install Script
              shell: bash
              run: |
                  chmod +x install.sh
                  ./install.sh

            - name: Run Tests
              run: |
                  if [[ "${{ matrix.venv }}" == "true" ]]; then
                    source venv/bin/activate
                  fi
                  make test

            - name: Generate coverage report
              if: ${{ matrix.coverage }}
              run: |
                  if [[ "${{ matrix.venv }}" == "true" ]]; then
                    source venv/bin/activate
                  fi
                  make coverage
                  make coverage-report COVERAGE_REPORT_FORMAT=xml

            - name: Upload coverage to Codecov
              if: ${{ matrix.coverage }}
              uses: codecov/codecov-action@v4
              with:
                  file: ./coverage.xml
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: true
                  slug: bartventer/dotfiles

    test-macos:
        runs-on: macos-latest
        name: Test on macOS
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'
                  cache: 'pip'

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.22.x'

            - name: Install Dependencies
              run: |
                  brew update
                  brew install zsh make
                  # Install Python dependencies
                  pip install -r requirements.txt

            - name: Run Install Script
              shell: bash
              run: |
                  chmod +x install.sh
                  ./install.sh

            - name: Run Tests
              run: |
                  make test

    semantic-release:
        name: Release
        if: ${{ !github.event.act }} # skip during local actions testing
        needs: [test-linux, test-macos]
        runs-on: ubuntu-latest
        permissions:
            contents: write
            issues: write
        steps:
            - uses: actions/checkout@v4
            - name: Run semantic-release
              if: github.repository == 'bartventer/dotfiles' && github.event_name == 'push'
              run: |
                  yarn global add semantic-release@17 @semantic-release/changelog @semantic-release/git
                  semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
