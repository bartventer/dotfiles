name: CI

on: [push, pull_request]

jobs:
    test-linux:
        runs-on: ubuntu-latest
        name: Test on Linux
        strategy:
            matrix:
                imageName:
                    [
                        'debian',
                        'ubuntu',
                        'fedora',
                        'archlinux',
                    ]
                include:
                    - imageName: 'archlinux'
                      coverage: true # only generate coverage on archlinux

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: 'Install devcontainer CLI'
              run: npm install -g @devcontainers/cli

            - name: Create and start '${{ matrix.imageName }}' devcontainer
              shell: bash
              run: make IMAGE_NAME=${{ matrix.imageName }} devcontainer-up

            - name: Run Dotfiles Tests for '${{ matrix.imageName }}' devcontainer
              run: make IMAGE_NAME=${{ matrix.imageName }} devcontainer-test

            - name: Install Python Dependencies
              shell: bash
              env:
                  PIP_BREAK_SYSTEM_PACKAGES: 1
              run: |
                  python3 -m pip install -r requirements.txt
                  python3 -m pip install coverage

            - name: Run Python Script Tests for '${{ matrix.imageName }}'
              shell: bash
              run: |
                  make test

            - name: Generate coverage report
              # Only generate coverage once, no need to do it for every OS
              if: ${{ matrix.coverage }}
              shell: bash
              run: |
                  make coverage
                  make coverage-report COVERAGE_REPORT_FORMAT=xml

            - name: Upload coverage to Codecov
              # Only upload coverage once, no need to do it for every OS
              if: ${{ matrix.coverage }}
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: true
                  slug: ${{ github.repository }}

    test-macos:
        runs-on: macos-latest
        name: Test on macOS
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'
                  cache: 'pip'

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.22.x'

            - name: Install Dependencies
              run: |
                  brew update
                  brew install zsh make
                  # Install Python dependencies
                  pip install -r requirements.txt

            - name: Run Install Script
              shell: bash
              run: |
                  chmod +x install.sh
                  ./install.sh

            - name: Run Dotfiles Tests
              shell: bash
              run: |
                cd test_project
                chmod +x ./test.sh
                ./test.sh

            - name: Run Python Script Tests
              shell: bash
              run: |
                  make test

    semantic-release:
        name: Release
        if: ${{ !github.event.act }} # skip during local actions testing
        needs: [test-linux, test-macos]
        runs-on: ubuntu-latest
        permissions:
            contents: write
            issues: write
        steps:
            - uses: actions/checkout@v4
            - name: Run semantic-release
              if: github.repository == 'bartventer/dotfiles' && github.event_name == 'push'
              run: |
                  yarn global add semantic-release@17 @semantic-release/changelog @semantic-release/git
                  semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
