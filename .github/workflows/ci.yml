name: CI

on:
    push:
        branches: [master]
    pull_request:

env:
    NODE_VERSION: '20.12.0'
    NODE_CHECK_LATEST: true
    NODE_CACHE: 'yarn'
    NODE_CACHE_DEPENDENCY_PATH: '**/yarn.lock'

jobs:
    validate-config:
        runs-on: ubuntu-latest
        name: Validate Configuration
        steps:
            - uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  check-latest: ${{ env.NODE_CHECK_LATEST }}
                  cache: ${{ env.NODE_CACHE }}
                  cache-dependency-path: ${{ env.NODE_CACHE_DEPENDENCY_PATH }}
            - name: Install Dependencies
              run: yarn install
            - name: Run Schema Validation
              run: make validate-config
    test-linux:
        needs: validate-config
        runs-on: ubuntu-latest
        name: Test on Linux
        strategy:
            fail-fast: false
            matrix:
                imageName: ['debian', 'ubuntu', 'fedora', 'archlinux']

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  check-latest: ${{ env.NODE_CHECK_LATEST }}
                  cache: ${{ env.NODE_CACHE }}
                  cache-dependency-path: ${{ env.NODE_CACHE_DEPENDENCY_PATH }}
            - name: Install Node Dependencies
              run: yarn install

            - name: Create and start '${{ matrix.imageName }}' devcontainer
              shell: bash
              run: make IMAGE_NAME=${{ matrix.imageName }} devcontainer-up

            - name: Run Dotfiles Tests for '${{ matrix.imageName }}' devcontainer
              run: make IMAGE_NAME=${{ matrix.imageName }} devcontainer-test

            - name: Run Python Script Tests for '${{ matrix.imageName }}'
              shell: bash
              run: make IMAGE_NAME=${{ matrix.imageName }} devcontainer-python-test

    test-macos:
        needs: validate-config
        runs-on: macos-latest
        name: Test on macOS
        env:
            COVERAGE_REPORT_FORMAT: ${{ github.event_name == 'push' && 'xml' || 'html' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  check-latest: ${{ env.NODE_CHECK_LATEST }}
                  cache: ${{ env.NODE_CACHE }}
                  cache-dependency-path: ${{ env.NODE_CACHE_DEPENDENCY_PATH }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'
                  cache: 'pip'

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.22.x'

            - name: Install Dependencies
              run: |
                  # Brew
                  brew update
                  brew install zsh make
                  # Node
                  yarn install
                  # Python
                  pip install -r requirements.txt

            - name: Run Install Script
              shell: bash
              run: make install

            - name: Run Dotfiles Tests
              shell: bash
              run: make test

            - name: Run Python Script Tests
              shell: bash
              run: make python-test

            - name: Generate coverage report
              shell: bash
              run: |
                  make coverage
                  # XML report for Codecov
                  make coverage-report COVERAGE_REPORT_FORMAT=${{ env.COVERAGE_REPORT_FORMAT }}

            - name: Upload coverage to Codecov
              if: ${{ github.event_name == 'push' }}
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.${{ env.COVERAGE_REPORT_FORMAT }}
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: true
                  slug: ${{ github.repository }}

            - name: Archive coverage report
              if: ${{ github.event_name != 'push' }}
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: ./coverage.${{ env.COVERAGE_REPORT_FORMAT }}

    semantic-release:
        name: Release
        if: ${{ !github.event.act && github.event_name == 'push' }}
        needs: [test-linux, test-macos]
        runs-on: ubuntu-latest
        permissions:
            contents: write
            issues: write
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  check-latest: ${{ env.NODE_CHECK_LATEST }}
                  cache: ${{ env.NODE_CACHE }}
                  cache-dependency-path: ${{ env.NODE_CACHE_DEPENDENCY_PATH }}
            - name: Install dependencies
              run: yarn install
            - name: Run semantic-release
              run: npx semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
